# ü¶Ä √âtape 1 : Builder interm√©diaire pour mettre en cache les d√©pendances
FROM rust:latest AS deps

# Installe musl et outils n√©cessaires
RUN apt-get update && apt-get install -y musl-tools \
    && rustup target add x86_64-unknown-linux-musl

WORKDIR /app

# Copie uniquement les fichiers de d√©pendances pour les mettre en cache
COPY Cargo.toml Cargo.lock ./

# Cr√©ation d‚Äôun faux fichier source pour que `cargo build` t√©l√©charge les d√©pendances
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Compilation des d√©pendances uniquement
RUN cargo build --release --target x86_64-unknown-linux-musl

# üß± √âtape 2 : Builder final pour compiler le vrai projet
FROM rust:latest AS builder

RUN apt-get update && apt-get install -y musl-tools \
    && rustup target add x86_64-unknown-linux-musl

WORKDIR /app

# Copie les fichiers du projet
COPY . .

# Copie le cache des d√©pendances depuis l'√©tape pr√©c√©dente
COPY --from=deps /app/target /app/target
COPY --from=deps /usr/local/cargo /usr/local/cargo

# Compile le projet r√©el pour musl
RUN cargo build --release --target x86_64-unknown-linux-musl

# üöÄ √âtape 3 : Image finale ultra-l√©g√®re
FROM alpine:latest
LABEL maintainer="Mickael PATRON"
LABEL org.opencontainers.image.authors="Mickael PATRON"
LABEL org.opencontainers.image.url="https://github.com/mpatron/rust_server"
LABEL org.opencontainers.image.documentation="https://github.com/mpatron/rust_server/README.md"
LABEL org.opencontainers.image.source="https://github.com/mpatron/rust_server"
LABEL org.opencontainers.image.version="1.0.0"
LABEL org.opencontainers.image.revision="1.0.0"
LABEL org.opencontainers.image.vendor="Mickael PATRON"
LABEL org.opencontainers.image.licenses="MIT"

# Cr√©e un utilisateur non-root
RUN adduser -D appuser

# Remplace `mon-projet` par le nom r√©el de ton binaire
COPY --from=builder /app/target/x86_64-unknown-linux-musl/release/rust_server /usr/local/bin/app

USER appuser

CMD ["app"]

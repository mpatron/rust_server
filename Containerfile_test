# ü¶Ä √âtape 1 : Builder interm√©diaire pour mettre en cache les d√©pendances
FROM rust:latest AS deps

WORKDIR /app

# Copie uniquement les fichiers de d√©pendances pour les mettre en cache
COPY Cargo.toml Cargo.lock ./

# Cr√©ation d‚Äôun faux fichier source pour que `cargo build` t√©l√©charge les d√©pendances
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Compilation des d√©pendances uniquement
RUN cargo build --release

# üß± √âtape 2 : Builder final pour compiler le vrai projet
FROM rust:latest AS builder

WORKDIR /app

# Copie les fichiers du projet
COPY . .

# Copie le cache des d√©pendances depuis l'√©tape pr√©c√©dente
COPY --from=deps /app/target /app/target
COPY --from=deps /usr/local/cargo /usr/local/cargo

# Compilation du projet r√©el
RUN cargo build --release

# üöÄ √âtape 3 : Image finale minimale
FROM debian:buster-slim

# Cr√©ation d‚Äôun utilisateur non-root (optionnel mais recommand√©)
RUN useradd -m appuser

# Copie du binaire compil√©
COPY --from=builder /app/target/release/rust_server /usr/local/bin/app

USER appuser

CMD ["app"]
